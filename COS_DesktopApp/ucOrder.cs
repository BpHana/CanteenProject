using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using System.Threading;

namespace COS_DesktopApp
{
    public partial class ucOrder : DevExpress.XtraEditors.XtraUserControl
    {
        private ucOrder _instance;

        COS_DesktopApp.CanteenOrderingSystemEntities dbContext;
        public ucOrder Instance
        {
            get
            {

                if (_instance == null)
                {
                    _instance = new ucOrder();

                }
                return _instance;
            }
        }
        public ucOrder()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            dbContext = new COS_DesktopApp.CanteenOrderingSystemEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.orders.LoadAsync().ContinueWith(loadTask =>
            {
                this.loadOrderDetails();
                Thread.Sleep(100);

                // Bind data to control when loading complete
                ordersBindingSource.DataSource = dbContext.orders.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void loadOrderDetails()
        {
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.order_details.LoadAsync().ContinueWith(loadTask =>
            {
                this.loadAccount();
                Thread.Sleep(100);

                // Bind data to control when loading complete
                order_detailsBindingSource.DataSource = dbContext.order_details.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void loadAccount()
        {
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.accounts.LoadAsync().ContinueWith(loadTask =>
            {
                this.loadProducts();
                Thread.Sleep(100);

                // Bind data to control when loading complete
                accountsBindingSource.DataSource = dbContext.accounts.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void loadProducts()
        {
            dbContext.products.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                productsBindingSource.DataSource = dbContext.products.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

    }
}
