using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid;

namespace COS_DesktopApp
{
    public partial class AddUserForm : DevExpress.XtraEditors.XtraForm
    {
        COS_DesktopApp.CanteenOrderingSystemEntities dbContext;
        GridView gv;
        GridControl gc;
        ucAccountDetails uc;

        public AddUserForm(ucAccountDetails uc,GridView gv, GridControl gc)
        {
            InitializeComponent();
            this.uc = uc;
            this.gv = gv;
            this.gc = gc;
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            dbContext = new COS_DesktopApp.CanteenOrderingSystemEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.accounts.LoadAsync().ContinueWith(loadTask =>
            {
                this.loadRole();
                // Bind data to control when loading complete
                accountsBindingSource.DataSource = dbContext.accounts.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

        }

        private void loadRole()
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            dbContext = new COS_DesktopApp.CanteenOrderingSystemEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.account_role.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                account_roleBindingSource.DataSource = dbContext.account_role.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            String email = emailTextEdit.Text;
            String password = Utils.Utils.GetHash(passwordTextEdit.Text);
            String phone = phonenumberTextEdit.Text;
            String fullname = fullnameTextEdit.Text;
            

            if (String.IsNullOrWhiteSpace(email))
            {
                XtraMessageBox.Show("Email must not be null.","Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
            } else if (String.IsNullOrWhiteSpace(password))
            {
                XtraMessageBox.Show("Password must not be null.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (String.IsNullOrWhiteSpace(phone))
            {
                XtraMessageBox.Show("Phone must not be null.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (String.IsNullOrWhiteSpace(fullname))
            {
                XtraMessageBox.Show("Fullname must not be null.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (birthdayDateEdit.EditValue == null)
            {
                XtraMessageBox.Show("Birthday must not be null.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if(id_roleTextEdit.EditValue == null)
            {
                XtraMessageBox.Show("Role must not be null.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                DateTime birthday = (DateTime)birthdayDateEdit.EditValue;
                int role_id = (int)id_roleTextEdit.EditValue;

                if(dbContext.accounts.Any(a => a.email.Equals(email)))
                {
                    XtraMessageBox.Show("Email existed.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    try
                    {
                        account acc = new account();
                        acc.id_role = role_id;
                        acc.fullname = fullname;
                        acc.email = email;
                        acc.birthday = birthday;
                        acc.password = password;
                        acc.phonenumber = phone;

                        dbContext.accounts.Add(acc);
                        dbContext.SaveChanges();
                        gc.Refresh();
                        gv.RefreshData();
                        

                        this.Dispose();
                    }catch
                    {
                        XtraMessageBox.Show("An error has occurred.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
           
        }
    }


}